CREATE DATABASE INVESTIGATING_METRIC_SPIKE;
USE INVESTIGATING_METRIC_SPIKE;
CREATE TABLE USERS 
         (user_id INT,
         created_at varchar(255),
         company_id	INT ,
         language VARCHAR(255),
         activated_at varchar(255),
         state CHAR(255));
CREATE TABLE EVENTS
		(user_id INT,
        occurred_at	VARCHAR(255),
        event_type	VARCHAR(255),
        event_name	VARCHAR(255),
        location	VARCHAR(255),
        device	VARCHAR(255),
        user_type INT);
CREATE TABLE EMAIL_EVENTS
        (user_id INT,	
        occurred_at	VARCHAR(255),
        action VARCHAR(255),
        user_type INT);
        
     
LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/users.csv"
INTO TABLE USERS
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 

LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/email_events.csv"
INTO TABLE email_events
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 
 
LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/events.csv"
INTO TABLE events
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 


SELECT * FROM USERS;
ALTER TABLE USERS
ADD COLUMN TCREATED_AT DATETIME;
UPDATE USERS SET TCREATED_AT = STR_TO_DATE(CREATED_AT, '%d-%m-%Y %H:%i');
ALTER TABLE USERS DROP COLUMN CREATED_AT;
ALTER TABLE USERS CHANGE COLUMN TCREATED_AT created_at DATETIME;

SELECT * FROM USERS;
ALTER TABLE USERS
ADD COLUMN TACTIVATED_AT DATETIME;
UPDATE USERS SET TACTIVATED_AT = STR_TO_DATE (ACTIVATED_AT, '%d-%m-%Y %H:%i');
ALTER TABLE USERS DROP COLUMN ACTIVATED_AT;
ALTER TABLE USERS CHANGE COLUMN TACTIVATED_AT activated_at DATETIME;
-- 
SELECT * FROM EVENTS;
ALTER TABLE EVENTS
ADD COLUMN TOCCURRED_AT DATETIME;
UPDATE EVENTS SET TOCCURRED_AT = STR_TO_DATE (OCCURRED_AT, '%d-%m-%Y %H:%i');
ALTER TABLE EVENTS DROP COLUMN OCCURRED_AT;
ALTER TABLE EVENTS CHANGE COLUMN TOCCURRED_AT occurred_at DATETIME;
--
SELECT * FROM EMAIL_EVENTS;
ALTER TABLE EMAIL_EVENTS
ADD COLUMN TOCCURRED_AT DATETIME;
UPDATE EMAIL_EVENTS SET TOCCURRED_AT = STR_TO_DATE (OCCURRED_AT, '%d-%m-%Y %H:%i');
ALTER TABLE EMAIL_EVENTS DROP COLUMN OCCURRED_AT;
ALTER TABLE EMAIL_EVENTS CHANGE COLUMN TOCCURRED_AT occurred_at DATETIME;


-- WEEKLY USER ENGAGEMENT 
-- TO CALCULATE THE WEEKLY ENGAGEMENT
SELECT 
    WEEK (OCCURRED_AT) AS WEEK_NO,
    COUNT(DISTINCT USER_ID) AS USERS,
    EVENT_TYPE
FROM
    EVENTS
WHERE EVENT_TYPE REGEXP 'ENGAGEMENT'
GROUP BY WEEK_NO , EVENT_TYPE;

-- USER GROWTH ANALYSIS
-- CALCULATE THE USER GROWTH FOR THE PRODUCT 
WITH DATA AS(select 
		year(activated_at) as years,  
		week(activated_at,1) as weeks,
        count(distinct user_id) as user
from users
where state REGEXP 'active'	
group by years, weeks
order by years, weeks )
SELECT YEARS,WEEKS,USER,
SUM(USER) OVER(ORDER BY YEARS,WEEKS) AS TOTAL_CUMULATIVE_GROWTH
FROM DATA;

-- WEEKLY RETENTION ANALYSIS
-- CALCULATE THE WEEKLY RETENTION USERS BASED ON THEIR SIGN-UP COHORT.
WITH DATA1 AS (SELECT USER_ID, WEEK(OCCURRED_AT, 1) AS SIGNING_IN_WEEK 
	FROM EVENTS
	WHERE EVENT_TYPE = 'SIGNUP_FLOW' AND EVENT_NAME = 'COMPLETE_SIGNUP'),
	DATA2 AS (SELECT USER_ID, WEEK(OCCURRED_AT, 1) AS ENGAGING_WEEK 
	FROM EVENTS
	WHERE EVENT_TYPE = 'ENGAGEMENT'),
	DATA3 AS (SELECT 
	WEEK(OCCURRED_AT, 1) AS SIGNING_IN_WEEK, COUNT(DISTINCT USER_ID) AS TOTAL_USERS
	FROM EVENTS
	WHERE EVENT_TYPE = 'SIGNUP_FLOW' AND EVENT_NAME = 'COMPLETE_SIGNUP'
	GROUP BY SIGNING_IN_WEEK)
SELECT  DATA1.SIGNING_IN_WEEK,
		DATA2.ENGAGING_WEEK,
        COUNT(DISTINCT DATA2.USER_ID) AS ENGAGED_USERS_PER_WEEK,
        DATA3.TOTAL_USERS AS TOTAL_SIGNUPS_PER_WEEK,
	    (COUNT(DISTINCT DATA2.USER_ID) / DATA3.TOTAL_USERS)* 100 AS RETENTION_RATE
FROM DATA1
JOIN DATA2 ON DATA1.USER_ID = DATA2.USER_ID
JOIN DATA3 ON DATA1.SIGNING_IN_WEEK = DATA3.SIGNING_IN_WEEK
GROUP BY DATA1.SIGNING_IN_WEEK,DATA2.ENGAGING_WEEK
ORDER BY DATA1.SIGNING_IN_WEEK,DATA2.ENGAGING_WEEK;

-- WEEKLY ENGAGEMENT PER DEVICE
-- MEASURING THE ACTIVNESS OF USERS ON A WEEKLY BASIS PER DEVICE
SELECT WEEK(OCCURRED_AT) AS WEEKS,DEVICE,COUNT(*) AS TOTAL
FROM EVENTS
WHERE EVENT_TYPE = 'ENGAGEMENT'
GROUP BY WEEKS,DEVICE
ORDER BY WEEKS,DEVICE ASC;

-- EMAIL ENGAGEMENT ANALYSIS
-- ANALYZING HOW USERS ARE ENGAGING WITH EMAIL SERVICE
SELECT
SUM(CASE WHEN action = 'EMAIL_OPEN' THEN 1 END) / 
SUM(CASE WHEN ACTION IN ('SENT_WEEKLY_DIGEST', 'SENT_REENGAGEMENT_EMAIL') THEN 1 END)*100 AS EMAIL_OPENING_RATE,
SUM(CASE WHEN action = 'EMAIL_CLICKTHROUGH' THEN 1 END) / 
SUM(CASE WHEN action IN ('SENT_WEEKLY_DIGEST', 'SENT_REENGAGEMENT_EMAIL') THEN 1 END)*100 AS EMAIL_CLICKING_RATE
FROM
    email_EVENTS;